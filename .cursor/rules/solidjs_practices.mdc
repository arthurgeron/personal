---
description: 
globs: *.tsx
alwaysApply: false
---
# SolidJS Best Practices for Arthur Geron's Portfolio

## Reactivity Patterns
- Use signals (`createSignal`) for reactive state like in `ThemeToggle.tsx`
- Never destructure signals or props directly when you need reactivity 
- Access signal values using function syntax: `signalName()`
- Use `createEffect` for side effects in response to signal changes
- For derived values, use `createMemo` to avoid unnecessary recalculations
- Example from the project: `const [theme, setTheme] = createSignal(...)` in ThemeToggle

## Component Implementation
- SolidJS components only run once, not on every update like React
- Handle cleanup properly with `onCleanup` function, as seen in Hero.tsx:
  ```tsx
  onCleanup(() => {
    cancelAnimationFrame(animationFrame);
    window.removeEventListener('resize', resizeCanvas);
  });
  ```
- Use `onMount` for initialization code that runs after component rendering:
  ```tsx
  onMount(() => {
    // initialization code here
  });
  ```

## Control Flow Components
- NEVER use `.map()` or traditional loops directly in JSX - this bypasses SolidJS's reactivity system
- Always use SolidJS's built-in control flow components:
  - `<For>` for list rendering (instead of `.map()`)
  - `<Show>` for conditional rendering (instead of ternary operators)
  - `<Switch>` and `<Match>` for multiple conditionals
  - `<Index>` when the index is more important than the items themselves
- Correct list rendering example:
  ```tsx
  // CORRECT:
  <For each={movies()}>{(movie) => 
    <MovieCard movie={movie} />
  }</For>
  
  // INCORRECT - avoid this:
  {movies().map(movie => <MovieCard movie={movie} />)}
  ```
- Correct conditional rendering:
  ```tsx
  // CORRECT:
  <Show when={isLoading()} fallback={<MoviesList />}>
    <LoadingSpinner />
  </Show>
  
  // INCORRECT - avoid this:
  {isLoading() ? <LoadingSpinner /> : <MoviesList />}
  ```

## State Management
- Use `createSignal` for simple state
- Use `createStore` for complex nested state:
  ```tsx
  const [state, setState] = createStore({
    user: { name: "John", age: 25 },
    preferences: { theme: "dark" }
  });
  
  // Update nested state
  setState("user", "name", "Jane");
  ```
- Use `createResource` for async data fetching:
  ```tsx
  const [movieData] = createResource(() => fetchMovieById(id()));
  ```
- Access loading/error states with resource properties:
  ```tsx
  <Show when={!movieData.loading} fallback={<Spinner />}>
    <MovieDetails data={movieData()} />
  </Show>
  ```

## Performance Optimization
- Leverage lazy loading for route components as done in App.tsx:
  ```tsx
  const Home = lazy(() => import('./pages/Home'));
  ```
- Use `Suspense` to handle loading states for lazy components:
  ```tsx
  <Suspense fallback={<div>Loading...</div>}>
    <Route path="/" component={Home} />
  </Suspense>
  ```
- Canvas animations (as in Hero.tsx) should clean up properly to prevent memory leaks
- CSS transitions are preferred over JavaScript animations for simple UI state changes
- Utilize dynamic imports for code-splitting to improve initial load time
- Always use the `key` property with a unique identifier when using `<For>` or `<Index>` components
- Never use array index as the key unless the list is static and never changes order
- Use `createMemo` to cache expensive calculations:
  ```tsx
  const filteredMovies = createMemo(() => {
    return movies().filter(movie => movie.title.includes(searchTerm()));
  });
  ```
- When unsubscribing from events or cleaning up resources, always use `onCleanup`

## Event Handling
- Use camelCase event handlers in JSX:
  ```tsx
  <button onClick={handleClick}>Click me</button>
  ```
- Avoid inline arrow functions in events when possible:
  ```tsx
  // Prefer:
  const handleSearch = (event) => {
    setSearchWord(event.target.value);
  };
  <input onChange={handleSearch} />
  
  // Instead of:
  <input onChange={(e) => setSearchWord(e.target.value)} />
  ```
- For forms, use `preventDefault` to handle form submission:
  ```tsx
  const handleSubmit = (e) => {
    e.preventDefault();
    // Handle form submission
  };
  <form onSubmit={handleSubmit}>...</form>
  ```

## JSX and Component Organization
- Use functional components throughout the application
- Component props should have proper TypeScript interfaces
- Separate concerns: UI components in `components/`, pages in `pages/`
- Keep animation logic encapsulated in specific components or utilities

## Routing
- Use `@solidjs/router` for declarative routing
- Use `<A>` component for navigation links (instead of anchor tags)
- Example:
  ```tsx
  <A href="/projects" class="btn btn-primary btn-lg mr-4">View Projects</A>
  ```

## Animation Integration
- Register GSAP plugins at the component level:
  ```tsx
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  
  gsap.registerPlugin(ScrollTrigger);
  ```
- Cleanup animations in `onCleanup` hook to prevent memory leaks 

## Router Structure and Context
- Router components create a context that must be properly accessible to child components
- Always properly type components that use router primitives with `ParentProps` or appropriate interfaces
- Route components should be direct children of a Router component (already defined in index.tsx)
- Never use `<A>` components or router hooks outside of a proper Router context
- Example of correct Route structure:
  ```tsx
  // In index.tsx
  <Router>
    <App />
  </Router>
  
  // In App.tsx (correct)
  <Route path="/" component={Home} />
  <Route path="/about" component={About} />
  
  // NOT like this (incorrect):
  <Routes>  // <-- SolidJS Router doesn't use a Routes wrapper
    <Route path="/" component={Home} />
  </Routes>
  ```
- Ensure `Layout` components receiving children from router have proper typing:
  ```tsx
  // Correct typing for Layout
  export default function Layout(props: ParentProps<{ className?: string }>) {
    return (
      <div>
        {props.children} // Router-provided children
      </div>
    );
  }
  ```

## Solid VS React
Unlike React, SolidJS components only run once and don't re-render, as mentioned in the documentation:
> Components are lightweight in that they are not stateful themselves and have no instances. Instead, they serve as factory functions for DOM elements and reactive primitives.
> Vanishing Components: Component functions are called once and then cease to exist. Components exist to organize your code and not much else.
While in React moving constants outside components prevents recreating them on re-renders, in SolidJS it's more about:
- Clean code organization
- Separation of concerns
- Making data reusable across components

## Code Organization and Data Management

### Data Declaration Patterns

- **Static Data**: Unlike React, SolidJS components only run once, not on every update. However, for maintainability and reusability:
  ```typescript
  // CORRECT: Declare outside of component scope
  const ITEMS = ['item1', 'item2', 'item3'];
  
  function MyComponent() {
    return <For each={ITEMS}>{item => <div>{item}</div>}</For>;
  }
  
  // AVOID: Don't declare static data inside components
  function MyComponent() {
    const items = ['item1', 'item2', 'item3']; // Unnecessarily scoped to component
    return <For each={items}>{item => <div>{item}</div>}</For>;
  }
  ```

- **Module Structure**: Place related items in dedicated files:
  ```typescript
  // constants.ts
  export const ITEMS = ['item1', 'item2', 'item3'];
  
  // interfaces.ts
  export interface Item {
    id: string;
    name: string;
  }
  
  // Component.tsx
  import { ITEMS } from './constants';
  import { Item } from './interfaces';
  ```

### When to Use Component-Scoped Data

- Reserve component-scoped data for:
  - Data derived from props
  - Data used with reactive primitives (signals, stores)
  - Values that genuinely need component-level isolation

- Example of appropriate component-scoped data:
  ```typescript
  function DataProcessor(props) {
    // Properly scoped: derived from props
    const processedData = createMemo(() => {
      return props.items.map(item => transformItem(item));
    });
    
    return <DataDisplay data={processedData()} />;
  }
  ```

### Benefits of Separation in SolidJS

- Improves code organization and maintainability
- Makes data and types reusable across components
- Supports better testing isolation
- Prevents potential memory issues with large data structures
- Creates clear boundaries between presentation and data

## Solid VS React
Unlike React, SolidJS components only run once and don't re-render, as mentioned in the documentation:
> Components are lightweight in that they are not stateful themselves and have no instances. Instead, they serve as factory functions for DOM elements and reactive primitives.
> Vanishing Components: Component functions are called once and then cease to exist. Components exist to organize your code and not much else.
While in React moving constants outside components prevents recreating them on re-renders, in SolidJS it's more about:
- Clean code organization
- Separation of concerns
- Making data reusable across components
